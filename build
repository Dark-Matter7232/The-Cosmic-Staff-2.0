#!/usr/bin/env bash

BUILD_DATE=$(date +"%m-%d-%Y")

# Directory variables
ZIP_DIR="/home/ichibauer/kernelBuilding/zippy"
IMG_DIR="/home/ichibauer/kernelBuilding/imageyy/AIK-Linux"
OUT_IMG_DIR="/home/ichibauer/kernelBuilding/optio/out/arch/arm64/boot"
FINAL_DIR="/home/ichibauer/kernelBuilding/feenal"
PUSH_PHONE_DIR="/sdcard/Download"

backupKernel() 
{
	BACKUP_NAME="boot"

	printf "\n"
	printf " > Backing up your previous kernel to ${PUSH_PHONE_DIR}/${BACKUP_NAME}.img now . . . \n"

	adb shell su -c dd if=/dev/block/by-name/boot of=${PUSH_PHONE_DIR}/${BACKUP_NAME}.img > /dev/null 2>&1
}

checkImage()
{
	if [ -e ${OUT_IMG_DIR}/Image ]
	then
		printf "\n"
		printf " > Found raw Image/kernel at ${OUT_IMG_DIR}/Image\n"
		printf "\n"
	else
		printf "\n"
		printf " > Raw Image/kernel not found; see log.txt for details.\n"
		printf "\n"

		exit 1
	fi
}

packKernel()
{
	checkImage

	read -p " > Zip (1) or Image (2)? " selection
	printf "\n"

	if ! [[ $selection == "1" || $selection == "2" ]]
	then
		printf "\n"
		printf " > Invalid input.\n"
		printf "\n"

		exit 1
	fi

	KERNEL_FILE=$(git rev-parse --verify --short=8 HEAD)-${BUILD_DATE}

	read -p " > [ROOTED DEVICES ONLY] Would you like to backup your previous kernel (y/n)? " backupKernelOrNo

	if [[ $backupKernelOrNo == "y" || $backupKernelOrNo == "Y" ]]
	then
		backupKernel
	fi

	if [ $selection == "1" ]
	then
		cd ${ZIP_DIR}

		rm -f *.zip
		rm -f Image

		printf "Optio-\n" | figlet > version
		echo "<----------------------------------->" >> version
		echo "- Build date : ${BUILD_DATE}" >> version
		echo "- By         : @$(whoami)" >> version
		echo "<----------------------------------->" >> version

		mv ${OUT_IMG_DIR}/Image ${ZIP_DIR}
		zip -r9 ${KERNEL_FILE}.zip * > /dev/null 2>&1
		mv ${KERNEL_FILE}.zip ${FINAL_DIR}

		printf "\n"
		read -p " > Want to reboot to recovery (y/n)? " bootToRecovery

		if [[ $bootToRecovery == "y" || $bootToRecovery == "Y" ]]
		then
			cd ${FINAL_DIR}
			adb push ${KERNEL_FILE}.zip ${PUSH_PHONE_DIR} > /dev/null 2>&1
			printf "\n"
			adb reboot recovery > /dev/null 2>&1
		else
	    		printf "\n"
	    		printf " > Zip can be found at ${FINAL_DIR}/${KERNEL_FILE}.zip\n"
	    		printf "\n"
		fi
	elif [ $selection == "2" ]
    	then
		IMG_DEFAULT="stock"

		cd ${IMG_DIR}
		bash cleanup.sh > /dev/null 2>&1
		bash unpackimg.sh > /dev/null 2>&1

		mv ${OUT_IMG_DIR}/Image ${IMG_DIR}/split_img/
		rm -f split_img/${IMG_DEFAULT}.img-kernel
		mv split_img/Image split_img/${IMG_DEFAULT}.img-kernel

		bash repackimg.sh > /dev/null 2>&1
		mv image-new.img ${KERNEL_FILE}.img
		mv ${KERNEL_FILE}.img ${FINAL_DIR}
		
		printf "\n"
		read -p " > Want to flash directly to the phone (y/n)? " flashOrNO
		printf "\n"

		if [[ $flashOrNO == "y" || $flashOrNO == "Y" ]]
		then
	    		cd ${FINAL_DIR}
	    		printf " > Booting into download mode . . . \n"

	    		adb reboot download > /dev/null 2>&1

			printf "\n"
			printf " > Flashing in 12 seconds . . . \n"
			printf "\n"

	    		sleep 12
	    		sudo heimdall flash --BOOT ${KERNEL_FILE}.img > /dev/null 2>&1
		else
	    		printf " > Image can be found at ${FINAL_DIR}/${KERNEL_FILE}.img\n"
	    		printf "\n"
		fi
    	fi

	exit 1
}

compileKernel()
{
	DEVICE_DEFCONFIG="M21_defconfig"

	if [ -d $(pwd)/out ]
	then
		printf "\n"
		read -p " > Build clean (y/n)? " cleanOrNo
		printf "\n"

		if [[ $cleanOrNo == "y" || $cleanOrNo == "Y" ]]
		then
	    		rm -rf out/
		fi
	fi

	clear

	make O=out ${DEVICE_DEFCONFIG}
	time make O=out -j$(nproc --all) 2>&1 | tee log.txt

	packKernel
}

toolchainSelect()
{
	clear

	printf "\n"
	printf " 1. GCC\n"
	printf " 2. Clang\n"
	printf " 3. Stock Samsung\n"

	printf "\n"
	read -p " > Select toolchain: " toolchainChoice

	if [ $toolchainChoice == "1" ]
	then
		TC_DIR="/tc/gcc/bin"
		export CROSS_COMPILE=aarch64-cruel-elf-
	elif [ $toolchainChoice == "2" ]
	then
		TC_DIR="/tc/clang/bin"
		export LLVM=1
		export CROSS_COMPILE=aarch64-linux-gnu-
	elif [ $toolchainChoice == "3" ]
	then
		TC_DIR="/tc/stock/bin"
		export STOCK=1
		export CROSS_COMPILE=aarch64-linux-android-
	else
		printf "\n"
		printf " > Invalid input\n"
		printf "\n"
		exit 1
	fi

	export ARCH=arm64
	export SUBARCH=arm64
	export ANDROID_MAJOR_VERSION=r
	export PATH=${TC_DIR}:$PATH
	export PLATFORM_VERSION=11

	compileKernel
}

toolchainSelect
